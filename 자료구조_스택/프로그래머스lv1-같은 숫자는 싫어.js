// 스프레드 연산자는 시간초과로 통과하지 못한다.
function solution(arr) {
  return arr.reduce((result, x) => {
    return result[result.length - 1] === x ? result : [...result, x]
  }, [])
}
// 정확성  테스트
// 테스트 1 〉	통과 (0.07ms, 30.3MB)
// 테스트 2 〉	통과 (0.07ms, 30.1MB)
// 테스트 3 〉	통과 (0.08ms, 30.1MB)
// 테스트 4 〉	통과 (0.06ms, 30.2MB)
// 테스트 5 〉	통과 (0.07ms, 29.9MB)
// 테스트 6 〉	통과 (0.11ms, 30MB)
// 테스트 7 〉	통과 (0.07ms, 30MB)
// 테스트 8 〉	통과 (0.07ms, 30.2MB)
// 테스트 9 〉	통과 (0.08ms, 30MB)
// 테스트 10 〉	통과 (0.13ms, 30.1MB)
// 테스트 11 〉	통과 (0.07ms, 30.1MB)
// 테스트 12 〉	통과 (0.14ms, 30.1MB)
// 테스트 13 〉	통과 (0.08ms, 30.3MB)
// 테스트 14 〉	통과 (0.10ms, 30.1MB)
// 테스트 15 〉	통과 (0.11ms, 30.2MB)
// 테스트 16 〉	통과 (0.10ms, 30.2MB)
// 테스트 17 〉	통과 (0.06ms, 30.2MB)
// 효율성  테스트
// 테스트 1 〉	실패 (시간 초과)
// 테스트 2 〉	실패 (시간 초과)
// 테스트 3 〉	실패 (시간 초과)
// 테스트 4 〉	실패 (시간 초과)

// 시간복잡도를 줄이기 위해 push메서드를 사용해서 바로 배열을 리턴하자.
function solution(arr) {
  return arr.reduce((result, x) => {
    if (result[result.length - 1] !== x) {
      result.push(x)
    }
    return result
  }, [])
}
// 정확성  테스트
// 테스트 1 〉	통과 (0.07ms, 30.1MB)
// 테스트 2 〉	통과 (0.07ms, 30.1MB)
// 테스트 3 〉	통과 (0.09ms, 30.3MB)
// 테스트 4 〉	통과 (0.07ms, 30.1MB)
// 테스트 5 〉	통과 (0.06ms, 30.1MB)
// 테스트 6 〉	통과 (0.06ms, 30MB)
// 테스트 7 〉	통과 (0.06ms, 29.9MB)
// 테스트 8 〉	통과 (0.06ms, 30.1MB)
// 테스트 9 〉	통과 (0.07ms, 30.2MB)
// 테스트 10 〉	통과 (0.06ms, 30.1MB)
// 테스트 11 〉	통과 (0.06ms, 30MB)
// 테스트 12 〉	통과 (0.07ms, 30.1MB)
// 테스트 13 〉	통과 (0.07ms, 30.2MB)
// 테스트 14 〉	통과 (0.06ms, 30.1MB)
// 테스트 15 〉	통과 (0.10ms, 30.1MB)
// 테스트 16 〉	통과 (0.07ms, 30.2MB)
// 테스트 17 〉	통과 (0.05ms, 30.2MB)
// 효율성  테스트
// 테스트 1 〉	통과 (28.17ms, 76.2MB)
// 테스트 2 〉	통과 (29.31ms, 75.6MB)
// 테스트 3 〉	통과 (46.39ms, 75MB)
// 테스트 4 〉	통과 (46.64ms, 75.8MB)
