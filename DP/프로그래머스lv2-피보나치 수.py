# 바텀-업 식 반복적 메모이제이션
def solution(n):
    def fib(n:int)->list:
        d = [0] * (n + 1)
        d[0], d[1] = 0, 1
        for i in range(2, n + 1):
            d[i] = (d[i - 2] % 1234567 + d[i - 1] % 1234567) % 1234567
        return d
    
    nums = fib(n)
    return nums[n]

"""
정확성  테스트
테스트 1 〉	통과 (0.01ms, 10.2MB)
테스트 2 〉	통과 (0.01ms, 10.3MB)
테스트 3 〉	통과 (0.01ms, 10.2MB)
테스트 4 〉	통과 (0.01ms, 10.2MB)
테스트 5 〉	통과 (0.01ms, 10.2MB)
테스트 6 〉	통과 (0.01ms, 10.3MB)
테스트 7 〉	통과 (0.32ms, 10.2MB)
테스트 8 〉	통과 (0.36ms, 10.2MB)
테스트 9 〉	통과 (0.07ms, 10.2MB)
테스트 10 〉	통과 (0.36ms, 10.4MB)
테스트 11 〉	통과 (0.18ms, 10.2MB)
테스트 12 〉	통과 (0.13ms, 10.2MB)
테스트 13 〉	통과 (24.42ms, 13.7MB)
테스트 14 〉	통과 (22.10ms, 13.8MB)
"""


"""js
# 타뷸레이션
function solution(n) {
    const dp = Array.from({length: n + 1}, (v) => 0);
    dp[1] = 1;
    
    for (let i = 2; i < n + 1; i++){
        dp[i] = (dp[i - 2] + dp[i - 1]) % 1234567;
    }
    return dp[n]
}

정확성  테스트
테스트 1 〉	통과 (0.07ms, 30.1MB)
테스트 2 〉	통과 (0.08ms, 30.1MB)
테스트 3 〉	통과 (0.10ms, 30MB)
테스트 4 〉	통과 (0.07ms, 29.8MB)
테스트 5 〉	통과 (0.10ms, 29.8MB)
테스트 6 〉	통과 (0.10ms, 30.1MB)
테스트 7 〉	통과 (0.37ms, 29.9MB)
테스트 8 〉	통과 (0.25ms, 30.2MB)
테스트 9 〉	통과 (0.57ms, 30.1MB)
테스트 10 〉	통과 (0.42ms, 30MB)
테스트 11 〉	통과 (0.33ms, 29.8MB)
테스트 12 〉	통과 (0.20ms, 29.9MB)
테스트 13 〉	통과 (18.64ms, 32.6MB)
테스트 14 〉	통과 (15.42ms, 33.3MB)

탑 - 바텀 재귀형식의 메모이제이션으로는 풀리지 않는 문제라고 한다.
"""